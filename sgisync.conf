
## sgisync configuration file, v1.0

#
# Before doing anything else, you must set the following two variables to your
# SupportFolio username and password.  If you do not yet have these, sign up for
# free at http://support.sgi.com/
#
#$sgiuser = "username";
#$sgipass = "password";

#
# Patches for which IRIX release should be downloaded?
# (If this is not specified, then the release currently running will be 
#  automagically detected and used)
#
# Note that releases from 6.5.2 to 6.5.21 inclusive should have a suffix of 'm'
# or 'f' to select the m(aintenance) or f(eature) steam.
#$release = '6.5.22';

#
# Should sgisync check whether a more up to date release is available before
# downloading packages?
# (use the "--checkonly" command-line option to check this and exit)
#
$updatecheck = TRUE;

#
# distloc is the location in which to save the downloaded packages;
# instloc is where the extracted components can be installed from.
# tmploc is a location where a cookie cache can be saved.
# oldloc is the directory to move files to which are no longer offered for the
# selected release.  To archive multiple versions, you could get this to the
# version of the previously downloaded release - but this is somewhat
# convoluted, and at best probably done via command-line.
#
$distloc = "/var/tmp/support.sgi.com/patches/dist";
$instloc = "/var/tmp/support.sgi.com/patches";
$tmploc  = "/var/tmp";
#$oldloc = "old";

#
# gnupath sets where to find the 'curl' binary, and also sensible versions of
# standard tools, such as the "bash" shell and tar.  This can safely be set to
# anywhere that contains these tools, therefore generally '/usr/gnu/bin' or
# '/usr/nekoware/bin'.
#
$gnupath = '/usr/nekoware/bin';

#
# Output verbose (and mostly superfluous ;) additional information.
#
$verbose = FALSE;

##
## NB: To actually erase files, both $safe and $pretend must be FALSE
##

#
# Do not create distribution or installation directories, and don't
# erase/move files.
#
$safe = FALSE;

#
# Don't extract packages or erase/move obsolete files.
# This should only be enabled for debugging purposes.
#
$pretend = FALSE;

#
# If set to FALSE, then downloaded packages won't be unpacked - but obsolete
# files will still be dealt with.
#
# This is the preferred option for use on space-constrained systems where
# storing both the tardist archive and the contents separately is impractical.
#
$extract = TRUE;

#
# Move old packages to an "obsolete" directory (FALSE) or delete them (TRUE)?
#
$delete = FALSE;

#
# Customise display colours (on compatible terminals)
#
# The available colours are black, red, green, yellow, and blue.
# You can also use bold and nobold - but support for this varies.
#
#$bang    = "$red!";
#$dash    = "$yellow-";
#$dot     = "$blue.";
#$eroteme = "$yellow?";
#$plus    = "$green+";
#$star    = "$green*";

#
# Launch swmgr on completion?
#
$launchswmgr = TRUE;

#
# Delete or comment-out the following line to confirm that you have
# configured nekosync.  Pay special attention to the $safe and
# $pretend variables!
#
$configured = FALSE;


#
##
## The settings below will be correct for almost everyone - please don't alter
## them unless you know what you're doing!
##
#

#
# Which standard "tar", "wget", and "rsync" utilities should be used?
#
# ("wget" can be substituted with any alternative utility if
#  desired - but it must have wget's "-O" option to output
#  downloaded data to STDOUT)
#
#$tar   = "/usr/nekoware/bin/tar";
#$get   = "/usr/nekoware/bin/wget";
#$rsync = "/usr/nekoware/bin/rsync";

#
# Pass arguments to the "get" binary...
#
#$getargs = '-q --passive-ftp -nd -np -O';
#$gettimeout = '-t5 -T10';
#$getchecktimeout = '-t3 -T5';

#
# ...and additional options for the "rsync" binary.
#
#$rsyncargs = '-v -z --delete --recursive --progress';

# vi: set syntax=perl:
